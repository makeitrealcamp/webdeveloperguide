# ¿Qué necesito aprender para convertirme en Desarrollador Web?

Para empezar, te debe gustar la tecnología. Debes manejar bien un computador y conocer sus partes básicas (procesador, memoria RAM, disco duro, etc). Debes entender a grandes rasgos qué es un dominio, una IP, un hosting, un sistema operativo y una base de datos, entre otros conceptos relacionados.

Necesitas entender algo de Inglés. Puede ser muy básico, pero entre mejor tu Inglés, mejores oportunidades vas a encontrar.

Hagamos un recorrido muy rápido por las tecnologías que debes aprender. No te preocupes si no son muy claras, después profundizaremos en cada una de ellas.

Lo mínimo que debes aprender es HTML y CSS, que son los lenguajes con los que se crean las páginas Web. Para escribir el código necesitas utilizar un editor de texto. Te recomendamos descargar uno diseñado para programadores como Sublime Text en vez del que viene por defecto con tu sistema operativo.

El siguiente paso es aprender un lenguaje de programación. Algunas personas recomiendan empezar con JavaScript. Nuestra recomendación es empezar con Ruby o Python. Y después JavaScript para que puedas comparar la sintaxis (las reglas del lenguaje). JavaScript es muy importante porque es el único lenguaje de programación que entienden los navegadores, pero puede ser muy complicado como primer lenguaje.

Para trabajar con Ruby o Python necesitas aprender a manejar la línea de comandos. También conocida como "DOS", "consola" o "terminal", la línea de comandos era la única forma de interactuar con un computador cuando no existían interfaces gráficas, pero los programadores la seguimos utilizando.

Una herramienta importante que debes aprender a manejar es un sistema de control de versiones que guarde el historial de cambios del código y te permita trabajar en equipo con otros sobre el mismo proyecto de forma simultánea. El sistema de control de versiones más popular actualmente es Git y es el que te recomendamos aprender.

Para crear aplicaciones Web tipo Twitter, Facebook, etc. necesitas escoger y aprender sobre un framework Web. Tu decisión dependerá del lenguaje de programación que hayas escogido. Por ejemplo, el framework Web más popular de Ruby es Ruby on Rails, el más popular de Python es Django y el más popular de Node.js (JavaScript) es Express.js. Más adelante profundizaremos sobre estas opciones. También necesitarás aprender a manejar una o varias Base de Datos como MySQL, PostgreSQL, MongoDB, etc.

La tendencia actual es crear aplicaciones de una página, llamadas SPA's (Single Page Applications) que nunca se refrescan. Muchos argumentan que ofrecen una mejor experiencia al usuario y se han creado innumerables frameworks basados en JavaScript como Angular, Ember, Backbone y React por nombrar algunos. Si quieres especializarte en Front-end deberás aprender varios de estos frameworks. En cualquier caso deberías aprender al menos sobre jQuery, que es la librería de JavaScript más básica para manipular HTML, escuchar eventos (clicks, teclas, etc.), hacer animaciones e interactuar con servidores remotos a través de AJAX desde el navegador.

Por último, es importante que sepas las opciones que existen para desplegar tus aplicaciones en Internet como Heroku, AWS, Digital Ocean, etc.

¿Mucha información? Profundicemos un poco más en cada una de estas tecnologías y el rol que desempeñan en la creación de aplicaciones Web.

## HTML y CSS

HTML y CSS son quizá las tecnologías más básicas que necesitas aprender como Web Developer. Con HTML (Hyper Text Markup Language) puedes definir la estructura de una página Web y con CSS (Cascading Style Sheets) puedes aplicarle estilo (color de fondo, márgenes entre los elementos, tamaño de las fuentes, bordes, etc.).

Hay muchas formas de hacer lo mismo con HTML y CSS, y la estrategia de muchos es "hacerlo funcionar". Es una buena estrategia. Pero si quieres especializarte en fron-end concéntrate en aprender CSS muy bien.

Adicionalmente deberás aprender sobre un framework de HTML y CSS como [Bootstrap](http://getbootstrap.com/), [Foundation](http://foundation.zurb.com/) o [Semantic UI](http://semantic-ui.com/). Si no sabes cuál escoger empieza por [Bootstrap](http://getbootstrap.com/) que es por mucho el más popular.

¿Qué te ofrece un framework HTML y CSS como Bootstrap? Primero, estilos básicos para los elementos de HTML como tipografía, tablas, formularios, imágenes, etc. Segundo, una grilla para que puedas organizar los elementos en la página más fácilmente y que se adapten al tamaño de la pantalla. Por último, un catalogo de componentes que la mayoría de sitios necesitan como barras de navegación, pestañas, mensajes de alertas, modales, barras de progreso, entre muchos otros componentes.

## Un lenguaje de programación

Aprender un lenguaje de programación no es como aprender HTML y CSS. Esta es la parte en que más personas se frustran porque lo más difícil no es aprender la sintaxis (las reglas) del lenguaje, lo difícil es aprender la lógica del programador, es decir, cómo usar el lenguaje para solucionar problemas.

Veamos algunos lenguajes con sus fortalezas y debilidades.

### JavaScript

La ventaja de JavaScript es que está en todo lado. JavaScript es el único lenguaje de programación que entienden actualmente los navegadores, así que muchas veces no hay opción. También lo han adaptado para el back-end con una plataforma llamada Node.js que funciona muy bien para cierto tipo de aplicaciones (chats, streaming de video, etc.). Y aunque es posible crear aplicaciones Web con Node.js, no es muy recomendable.

La desventaja de JavaScript es que no es muy buen lenguaje, la sintaxis es compleja, y en general, es un lenguaje complicado. Hoy en día están intentando arreglarlo pero el problema es que deben seguir soportando todas las características antiguas del lenguaje porque la mayoría de páginas Web usan JavaScript.

### Ruby y Python

La sintaxis de estos dos lenguajes es muy parecida. Es clara y muy amigable para el principiante. Son lenguajes pensados en la productividad del programador, más que en el rendimiento.

Ruby es hoy muy popular para construir aplicaciones Web. Twitter, Groupon, Shopify, Stripe y la mayoría de startups hoy en día usan Ruby. Python se usa mucho para análisis de datos e inteligencia artificial, aunque también es posible crear aplicaciones Web con Python.

La desventaja de estos lenguajes es que son relativamente lentos y la configuración en Windows no es fácil.

### PHP

PHP fue uno de los primeros lenguajes enfocados a la Web y aún existen muchas aplicaciones sobre este lenguaje. Wordpress, que es el CMS (Sistema de Administración de Contenidos) más popular de la actualidad está hecho sobre PHP. Facebook, una de las aplicaciones más usadas actualmente también está hecha con PHP.

La desventaja de PHP es que no es un buen lenguaje de programación y muchos empleos de PHP son para mantener sitios muy antiguos.

### Java y C-Sharp

Estos son lenguajes muy populares a nivel empresarial. También son los lenguajes que hoy siguen enseñando las universidades. La ventaja es que, a diferencia de Ruby y Python, son lenguajes con un muy buen rendimiento.

La desventaja es que no están pensados en la productividad del programador. Son lenguajes con grandes compañías (Oracle y Microsoft respectivamente) detrás que esperan lucrarse de alguna forma u otra del lenguaje (generalmente cobrándoles a grandes empresas por soluciones sobre dimensionadas que no necesitan). Los empleos en estos lenguajes son, generalmente, en grandes empresas que ven la tecnología más como una amenaza que como una oportunidad.

En todos estos lenguajes vas a encontrar trabajo. Para Java y C-Sharp es posible que te pidan títulos o certificados por el tipo de empresas que contratan para estos lenguajes. Pero en general, vas a notar que las empresas valoran más lo que has creado y si verdaderamente tienes un interés por la programación o no.

## La línea de comandos

La línea de comandos es un aplicación que nos permite escribir y ejecutar comandos sobre el sistema operativo sin necesidad de usar el mouse. Los programadores la siguen usando porque permite automatizar tareas rápidamente sin necesidad de crear interfaces gráficas. También es la forma de interactuar con servidores remotos. Muchas de las aplicaciones que usan los Desarrolladores Web son aplicaciones para la línea de comandos.

## Un editor de texto

Para crear tus aplicaciones Web vas a necesitar un editor de texto en donde escribir el código. Los editores de texto más básicos son Bloc de Notas en Windows y TextEdit en Mac. Pero el problema de estos editores de texto es que no están diseñados para los programadores.

Un editor de texto para programadores debe tener al menos las siguientes dos características básicas: debe resaltar el código con colores (recuerda que el código es texto plano sin formato) y debe auto completar el código a medida que lo escribas.

Aunque existen muchos editores de texto en el mercado, el más popular ahora entre los programadores es Sublime Text, que se puede descargar y usar gratuitamente, aunque cada cierto tiempo te va a pedir que lo compres.

Otras opciones incluyen Atom, TextMate, Brackets y Notepad++. También existen ahora editores en la Web como [Koding](https://koding.com/), [Cloud9](https://c9.io/) y [Nitrous](https://nitrous.io/).

## Un sistema de control de versiones

Un sistema de control de versiones tiene dos objetivos principales:

* Guardar el historial de cambios sobre el código de un proyecto.
* Permitir a varias personas contribuir simultáneamente sobre un mismo proyecto.

El sistema de control de versiones más popular actualmente es Git. Git fue diseñado y desarrollado inicialmente por Linus Torvalds en el 2005 cuando BitKeeper, el sistema de control de versiones que utilizaban para el desarrollo de Linux, cambiara su licencia y no permitiera su uso libre.

Si no lo has hecho, ve y crea una cuenta en Github. Github es la red social de los programadores. Ahí puedes ver el código de varios proyectos Open Source, colaborar en esos proyectos o publicar tus propios proyectos.

## El protocolo HTTP

Cada vez que entras a algún sitio Web (p.e. Google o Facebook), tu navegador está intercambiando mensajes según unas reglas establecidas por HTTP (Hyper Text Transfer Protocol).

Muchas personas prefieren aprender primero un framework Web antes de HTTP, pero nuestra experiencia nos dice que aprender HTTP primero es mucho más valioso porque te va a permitir adaptarte a cualquier framework Web. Además, aprender sobre el protocolo HTTP te va a preparar para entender Web API's más adelante, que es un mecanismo para conectar aplicaciones de forma automática.

## Un framework Web

Escribir una aplicación Web manipulando directamente el protocolo HTTP es muy engorroso. Es por eso que se han creado librerías y frameworks que facilitan la creación de aplicaciones Web. Igual es importante entender el protocolo HTTP, pero estas librerías y frameworks nos facilitan la vida.

Un framework Web se puede hacer usando cualquier lenguaje de programación. Existen frameworks para Ruby, Python, Node.js, Java, etc.

Si entiendes bien el protocolo HTTP, aprender cualquiera de estos frameworks es mucho más fácil.

// Falta hablar de las opciones con mayor profundidad.

## jQuery

jQuery es una librería escrita en JavaScript para manipular HTML, escuchar eventos (clicks, movimientos del mouse, teclas, etc.) y hacer llamados AJAX a servidores remotos.

## Bases de Datos



## Despliegue de aplicaciones
